ceaser cipher 
#################

def encrypt(string, shift):
    cipher = ' '
    for char in string:
        if char == ' ':
            cipher = cipher + char
        elif char.isupper():
            cipher = cipher + chr((ord(char) + shift - 65) % 26 + 65)
        else:
            cipher = cipher + chr((ord(char) + shift - 97) % 26 + 97)
    return cipher

def decrypt(cipher, shift):
    plain = ''
    for char in cipher:
        if char == ' ':
            plain = plain + char
        elif char.isupper():
            plain = plain + chr((ord(char) - shift - 65) % 26 + 65)
        else:
            plain = plain + chr((ord(char) - shift - 97) % 26 + 97)

    return plain


text = input("Enter string: ")
s = int(input("Enter shift number: "))
print("Original string: ", text)
plain=encrypt(text,s)
print("After encryption: ", encrypt(text, s))
print("After decryption :",decrypt(plain,s))


polyalphabetic cipher
#####################

key_word = input("Enter key Word: ")
#key_word = 'deceptive'

message = input("Enter Message: ")
#message = "wearediscoveredsaveyourself"
print("Message = ", message)
key_word_list = list(key_word)
key = ''
mess_len = len(message)
key_word_len = len(key_word)
for i in range(mess_len):
    key = key + key_word_list[(i%key_word_len)]
print("Key =     ", key)

key_list = list(key)
mess_list = list(message)

cipher_list = []
for i in range(mess_len):
    sum = (ord(key_list[i].upper()) + ord(mess_list[i].upper()) - (65*2))%26
    cipher_list.append(chr(sum + 65))

cipher = ''
for ch in cipher_list:
    cipher = cipher + ch

print("Cipher Text:", cipher )

dec_mess_list = []
for i in range(mess_len):
    sum = (ord(cipher_list[i].upper()) - ord(key_list[i].upper()) - (65*2))%26
    dec_mess_list.append(chr(sum + 65))

dec_mess = ''
for ch in dec_mess_list:
    dec_mess = dec_mess + ch

print("Decrypted Text:", dec_mess )



monoalphabetic cipher 
#################

import  random

plain_text = []
key =[]
for i in range(65, 65+26):
    plain_text.append(chr(i))
    key.append(chr(i))

message = input("Enter message: ")
random.shuffle(key)
print("Plain Text: ",plain_text)
print("Key:        ",key)

cipher = ''
for ch in message:
    try:
        index = plain_text.index(ch.upper())
        cipher = cipher + key[index]
    except:
        cipher = cipher + ch

print("Cipher: ", cipher)

decrypted_mess = ''
for ch in cipher:
    try:
        index = key.index(ch.upper())
        decrypted_mess = decrypted_mess + plain_text[index]
    except:
        decrypted_mess = decrypted_mess + ch

print("Decrypted Message: ", decrypted_mess)


Rsa algorithm
################

from decimal import Decimal

def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)

p = int(input('Enter the value of p = '))
q = int(input('Enter the value of q = '))

n = p * q
Qn = (p - 1) * (q - 1)

for e in range(2, Qn):
    if gcd(e, Qn) == 1:
        break
print('n = ', n)
print('Qn = ', Qn)
print('e = ', e)

d = 1
while 1:
    if (d * e) % Qn == 1:
        break
    d += 1

print('d = ', d)
print('Public Key = ' + '(' + str(e) + ',' + str(n) + ')')
print('Private Key = ' + '(' + str(d) + ',' + str(n) + ')')
M = int(input('Enter the value of text = '))

C = (pow(M, e) % n)
print('Cipher Text is = ', C)

PT = (pow(C, d) % n)
print('Decrypted Plaintext =', PT)


deffi almonkey
###############

from math import gcd

q = int(input("Enter Prime number, q: "))

def countPrimitiveRoots(p):
    result = 1
    for i in range(2, p, 1):
        if (gcd(i, p) == 1):
            result += 1
    return result

alpha = countPrimitiveRoots(q-1)

print("Primitive root of q is: ")

print(alpha)

xa = int(input("select User A Privet Key: "))
xb = int(input("select User B Privet Key: "))

public_key_of_user_a = pow(alpha, xa) % q
public_key_of_user_b = pow(alpha, xb) % q

secret_key_of_user_a = pow(public_key_of_user_b, xa) % q
secret_key_of_user_b = pow(public_key_of_user_a, xb) % q

print("USER A Secret key = ", secret_key_of_user_a)
print("USER B Secret key = ", secret_key_of_user_b)


GCD 
###########



def gcd(m,n):
    if m< n:
        (m,n) = (n,m)
    while (m % n != 0):
        (m, n) = (n, m % n)
    return n

# calling function with parameters and printing it out
a=int(input('Enter the first Number :'))
b=int(input('Enter the second number:'))

print(" GCD of given number is :",gcd(a,b))



playfire cipher
################

key = input("Enter key:")
key = key.replace(" ", "")
key = key.upper()

def matrix(x, y, initial):
    return [[initial for i in range(x)] for j in range(y)]


result = list()
for c in key:  # storing key
    if c not in result:
        if c == 'J':
            result.append('I')
        else:
            result.append(c)
flag = 0
for i in range(65, 91):  # storing other character
    if chr(i) not in result:
        if i == 73 and chr(74) not in result:
            result.append("I")
            flag = 1
        elif flag == 0 and i == 73 or i == 74:
            pass
        else:
            result.append(chr(i))
k = 0
my_matrix = matrix(5, 5, 0)  # initialize matrix
for i in range(0, 5):  # making matrix
    for j in range(0, 5):
        my_matrix[i][j] = result[k]
        k += 1

def locindex(c):  # get location of each character
    loc = list()
    if c == 'J':
        c = 'I'
    for i, j in enumerate(my_matrix):
        for k, l in enumerate(j):
            if c == l:
                loc.append(i)
                loc.append(k)
                return loc


def encrypt():  # Encryption
    msg = str(input("ENTER MSG:"))
    msg = msg.upper()
    msg = msg.replace(" ", "")
    i = 0
    for s in range(0, len(msg) + 1, 2):
        if s < len(msg) - 1:
            if msg[s] == msg[s + 1]:
                msg = msg[:s + 1] + 'X' + msg[s + 1:]
    if len(msg) % 2 != 0:
        msg = msg[:] + 'X'
    print("CIPHER TEXT:", end=' ')
    while i < len(msg):
        loc = list()
        loc = locindex(msg[i])
        loc1 = list()
        loc1 = locindex(msg[i + 1])
        if loc[1] == loc1[1]:
            print("{}{}".format(my_matrix[(loc[0] + 1) % 5][loc[1]], my_matrix[(loc1[0] + 1) % 5][loc1[1]]), end=' ')
        elif loc[0] == loc1[0]:
            print("{}{}".format(my_matrix[loc[0]][(loc[1] + 1) % 5], my_matrix[loc1[0]][(loc1[1] + 1) % 5]), end=' ')
        else:
            print("{}{}".format(my_matrix[loc[0]][loc1[1]], my_matrix[loc1[0]][loc[1]]), end=' ')
        i = i + 2


def decrypt():  # decryption
    msg = str(input("ENTER CIPHER TEXT:"))
    msg = msg.upper()
    msg = msg.replace(" ", "")
    print("PLAIN TEXT:", end=' ')
    i = 0
    while i < len(msg):
        loc = list()
        loc = locindex(msg[i])
        loc1 = list()
        loc1 = locindex(msg[i + 1])
        if loc[1] == loc1[1]:
            print("{}{}".format(my_matrix[(loc[0] - 1) % 5][loc[1]], my_matrix[(loc1[0] - 1) % 5][loc1[1]]), end=' ')
        elif loc[0] == loc1[0]:
            print("{}{}".format(my_matrix[loc[0]][(loc[1] - 1) % 5], my_matrix[loc1[0]][(loc1[1] - 1) % 5]), end=' ')
        else:
            print("{}{}".format(my_matrix[loc[0]][loc1[1]], my_matrix[loc1[0]][loc[1]]), end=' ')
        i = i + 2


while (1):
    choice = int(input("\n 1.Encryption \n 2.Decryption: \n 3.EXIT \n choice : "))
    if choice == 1:
        encrypt()
    elif choice == 2:
        decrypt()
    elif choice == 3:
        exit()
    else:
        print("Choose correct choice")



